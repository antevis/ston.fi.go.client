/*
ston-server

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.13.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the FarmNftInfoSchema type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FarmNftInfoSchema{}

// FarmNftInfoSchema struct for FarmNftInfoSchema
type FarmNftInfoSchema struct {
	// NFT address
	Address string `json:"address"`
	// NFT creation timestamp
	CreateTimestamp string `json:"create_timestamp"`
	// Minimal unstake timestamp
	MinUnstakeTimestamp string `json:"min_unstake_timestamp"`
	// Nonclaimed rewards
	NonclaimedRewards string `json:"nonclaimed_rewards"`
	// Amount of staked tokens
	StakedTokens string `json:"staked_tokens"`
	// NFT status
	Status string `json:"status"`
}

type _FarmNftInfoSchema FarmNftInfoSchema

// NewFarmNftInfoSchema instantiates a new FarmNftInfoSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFarmNftInfoSchema(address string, createTimestamp string, minUnstakeTimestamp string, nonclaimedRewards string, stakedTokens string, status string) *FarmNftInfoSchema {
	this := FarmNftInfoSchema{}
	this.Address = address
	this.CreateTimestamp = createTimestamp
	this.MinUnstakeTimestamp = minUnstakeTimestamp
	this.NonclaimedRewards = nonclaimedRewards
	this.StakedTokens = stakedTokens
	this.Status = status
	return &this
}

// NewFarmNftInfoSchemaWithDefaults instantiates a new FarmNftInfoSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFarmNftInfoSchemaWithDefaults() *FarmNftInfoSchema {
	this := FarmNftInfoSchema{}
	return &this
}

// GetAddress returns the Address field value
func (o *FarmNftInfoSchema) GetAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Address
}

// GetAddressOk returns a tuple with the Address field value
// and a boolean to check if the value has been set.
func (o *FarmNftInfoSchema) GetAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Address, true
}

// SetAddress sets field value
func (o *FarmNftInfoSchema) SetAddress(v string) {
	o.Address = v
}

// GetCreateTimestamp returns the CreateTimestamp field value
func (o *FarmNftInfoSchema) GetCreateTimestamp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreateTimestamp
}

// GetCreateTimestampOk returns a tuple with the CreateTimestamp field value
// and a boolean to check if the value has been set.
func (o *FarmNftInfoSchema) GetCreateTimestampOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreateTimestamp, true
}

// SetCreateTimestamp sets field value
func (o *FarmNftInfoSchema) SetCreateTimestamp(v string) {
	o.CreateTimestamp = v
}

// GetMinUnstakeTimestamp returns the MinUnstakeTimestamp field value
func (o *FarmNftInfoSchema) GetMinUnstakeTimestamp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MinUnstakeTimestamp
}

// GetMinUnstakeTimestampOk returns a tuple with the MinUnstakeTimestamp field value
// and a boolean to check if the value has been set.
func (o *FarmNftInfoSchema) GetMinUnstakeTimestampOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MinUnstakeTimestamp, true
}

// SetMinUnstakeTimestamp sets field value
func (o *FarmNftInfoSchema) SetMinUnstakeTimestamp(v string) {
	o.MinUnstakeTimestamp = v
}

// GetNonclaimedRewards returns the NonclaimedRewards field value
func (o *FarmNftInfoSchema) GetNonclaimedRewards() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NonclaimedRewards
}

// GetNonclaimedRewardsOk returns a tuple with the NonclaimedRewards field value
// and a boolean to check if the value has been set.
func (o *FarmNftInfoSchema) GetNonclaimedRewardsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NonclaimedRewards, true
}

// SetNonclaimedRewards sets field value
func (o *FarmNftInfoSchema) SetNonclaimedRewards(v string) {
	o.NonclaimedRewards = v
}

// GetStakedTokens returns the StakedTokens field value
func (o *FarmNftInfoSchema) GetStakedTokens() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StakedTokens
}

// GetStakedTokensOk returns a tuple with the StakedTokens field value
// and a boolean to check if the value has been set.
func (o *FarmNftInfoSchema) GetStakedTokensOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StakedTokens, true
}

// SetStakedTokens sets field value
func (o *FarmNftInfoSchema) SetStakedTokens(v string) {
	o.StakedTokens = v
}

// GetStatus returns the Status field value
func (o *FarmNftInfoSchema) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *FarmNftInfoSchema) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *FarmNftInfoSchema) SetStatus(v string) {
	o.Status = v
}

func (o FarmNftInfoSchema) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FarmNftInfoSchema) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["address"] = o.Address
	toSerialize["create_timestamp"] = o.CreateTimestamp
	toSerialize["min_unstake_timestamp"] = o.MinUnstakeTimestamp
	toSerialize["nonclaimed_rewards"] = o.NonclaimedRewards
	toSerialize["staked_tokens"] = o.StakedTokens
	toSerialize["status"] = o.Status
	return toSerialize, nil
}

func (o *FarmNftInfoSchema) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"address",
		"create_timestamp",
		"min_unstake_timestamp",
		"nonclaimed_rewards",
		"staked_tokens",
		"status",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFarmNftInfoSchema := _FarmNftInfoSchema{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFarmNftInfoSchema)

	if err != nil {
		return err
	}

	*o = FarmNftInfoSchema(varFarmNftInfoSchema)

	return err
}

type NullableFarmNftInfoSchema struct {
	value *FarmNftInfoSchema
	isSet bool
}

func (v NullableFarmNftInfoSchema) Get() *FarmNftInfoSchema {
	return v.value
}

func (v *NullableFarmNftInfoSchema) Set(val *FarmNftInfoSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableFarmNftInfoSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableFarmNftInfoSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFarmNftInfoSchema(val *FarmNftInfoSchema) *NullableFarmNftInfoSchema {
	return &NullableFarmNftInfoSchema{value: val, isSet: true}
}

func (v NullableFarmNftInfoSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFarmNftInfoSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


