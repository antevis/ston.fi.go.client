/*
ston-server

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.13.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the FarmInfoSchema type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FarmInfoSchema{}

// FarmInfoSchema struct for FarmInfoSchema
type FarmInfoSchema struct {
	// Annual percentage yield
	Apy NullableString `json:"apy,omitempty"`
	// Minimal stake duration seconds
	MinStakeDurationS string `json:"min_stake_duration_s"`
	// Address of the farm
	MinterAddress string `json:"minter_address"`
	// Farm NFT list
	NftInfos []FarmNftInfoSchema `json:"nft_infos"`
	// Address of the pool
	PoolAddress string `json:"pool_address"`
	// Address of the reward token
	RewardTokenAddress string `json:"reward_token_address"`
	// Minter status
	Status string `json:"status"`
}

type _FarmInfoSchema FarmInfoSchema

// NewFarmInfoSchema instantiates a new FarmInfoSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFarmInfoSchema(minStakeDurationS string, minterAddress string, nftInfos []FarmNftInfoSchema, poolAddress string, rewardTokenAddress string, status string) *FarmInfoSchema {
	this := FarmInfoSchema{}
	this.MinStakeDurationS = minStakeDurationS
	this.MinterAddress = minterAddress
	this.NftInfos = nftInfos
	this.PoolAddress = poolAddress
	this.RewardTokenAddress = rewardTokenAddress
	this.Status = status
	return &this
}

// NewFarmInfoSchemaWithDefaults instantiates a new FarmInfoSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFarmInfoSchemaWithDefaults() *FarmInfoSchema {
	this := FarmInfoSchema{}
	return &this
}

// GetApy returns the Apy field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FarmInfoSchema) GetApy() string {
	if o == nil || IsNil(o.Apy.Get()) {
		var ret string
		return ret
	}
	return *o.Apy.Get()
}

// GetApyOk returns a tuple with the Apy field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FarmInfoSchema) GetApyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Apy.Get(), o.Apy.IsSet()
}

// HasApy returns a boolean if a field has been set.
func (o *FarmInfoSchema) HasApy() bool {
	if o != nil && o.Apy.IsSet() {
		return true
	}

	return false
}

// SetApy gets a reference to the given NullableString and assigns it to the Apy field.
func (o *FarmInfoSchema) SetApy(v string) {
	o.Apy.Set(&v)
}
// SetApyNil sets the value for Apy to be an explicit nil
func (o *FarmInfoSchema) SetApyNil() {
	o.Apy.Set(nil)
}

// UnsetApy ensures that no value is present for Apy, not even an explicit nil
func (o *FarmInfoSchema) UnsetApy() {
	o.Apy.Unset()
}

// GetMinStakeDurationS returns the MinStakeDurationS field value
func (o *FarmInfoSchema) GetMinStakeDurationS() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MinStakeDurationS
}

// GetMinStakeDurationSOk returns a tuple with the MinStakeDurationS field value
// and a boolean to check if the value has been set.
func (o *FarmInfoSchema) GetMinStakeDurationSOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MinStakeDurationS, true
}

// SetMinStakeDurationS sets field value
func (o *FarmInfoSchema) SetMinStakeDurationS(v string) {
	o.MinStakeDurationS = v
}

// GetMinterAddress returns the MinterAddress field value
func (o *FarmInfoSchema) GetMinterAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MinterAddress
}

// GetMinterAddressOk returns a tuple with the MinterAddress field value
// and a boolean to check if the value has been set.
func (o *FarmInfoSchema) GetMinterAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MinterAddress, true
}

// SetMinterAddress sets field value
func (o *FarmInfoSchema) SetMinterAddress(v string) {
	o.MinterAddress = v
}

// GetNftInfos returns the NftInfos field value
func (o *FarmInfoSchema) GetNftInfos() []FarmNftInfoSchema {
	if o == nil {
		var ret []FarmNftInfoSchema
		return ret
	}

	return o.NftInfos
}

// GetNftInfosOk returns a tuple with the NftInfos field value
// and a boolean to check if the value has been set.
func (o *FarmInfoSchema) GetNftInfosOk() ([]FarmNftInfoSchema, bool) {
	if o == nil {
		return nil, false
	}
	return o.NftInfos, true
}

// SetNftInfos sets field value
func (o *FarmInfoSchema) SetNftInfos(v []FarmNftInfoSchema) {
	o.NftInfos = v
}

// GetPoolAddress returns the PoolAddress field value
func (o *FarmInfoSchema) GetPoolAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PoolAddress
}

// GetPoolAddressOk returns a tuple with the PoolAddress field value
// and a boolean to check if the value has been set.
func (o *FarmInfoSchema) GetPoolAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PoolAddress, true
}

// SetPoolAddress sets field value
func (o *FarmInfoSchema) SetPoolAddress(v string) {
	o.PoolAddress = v
}

// GetRewardTokenAddress returns the RewardTokenAddress field value
func (o *FarmInfoSchema) GetRewardTokenAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RewardTokenAddress
}

// GetRewardTokenAddressOk returns a tuple with the RewardTokenAddress field value
// and a boolean to check if the value has been set.
func (o *FarmInfoSchema) GetRewardTokenAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RewardTokenAddress, true
}

// SetRewardTokenAddress sets field value
func (o *FarmInfoSchema) SetRewardTokenAddress(v string) {
	o.RewardTokenAddress = v
}

// GetStatus returns the Status field value
func (o *FarmInfoSchema) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *FarmInfoSchema) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *FarmInfoSchema) SetStatus(v string) {
	o.Status = v
}

func (o FarmInfoSchema) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FarmInfoSchema) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Apy.IsSet() {
		toSerialize["apy"] = o.Apy.Get()
	}
	toSerialize["min_stake_duration_s"] = o.MinStakeDurationS
	toSerialize["minter_address"] = o.MinterAddress
	toSerialize["nft_infos"] = o.NftInfos
	toSerialize["pool_address"] = o.PoolAddress
	toSerialize["reward_token_address"] = o.RewardTokenAddress
	toSerialize["status"] = o.Status
	return toSerialize, nil
}

func (o *FarmInfoSchema) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"min_stake_duration_s",
		"minter_address",
		"nft_infos",
		"pool_address",
		"reward_token_address",
		"status",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFarmInfoSchema := _FarmInfoSchema{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFarmInfoSchema)

	if err != nil {
		return err
	}

	*o = FarmInfoSchema(varFarmInfoSchema)

	return err
}

type NullableFarmInfoSchema struct {
	value *FarmInfoSchema
	isSet bool
}

func (v NullableFarmInfoSchema) Get() *FarmInfoSchema {
	return v.value
}

func (v *NullableFarmInfoSchema) Set(val *FarmInfoSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableFarmInfoSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableFarmInfoSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFarmInfoSchema(val *FarmInfoSchema) *NullableFarmInfoSchema {
	return &NullableFarmInfoSchema{value: val, isSet: true}
}

func (v NullableFarmInfoSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFarmInfoSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


