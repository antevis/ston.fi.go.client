/*
ston-server

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.13.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the OperationsInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OperationsInfo{}

// OperationsInfo struct for OperationsInfo
type OperationsInfo struct {
	Asset0Info AssetInfoSchema `json:"asset0_info"`
	Asset1Info AssetInfoSchema `json:"asset1_info"`
	Operation OperationStat `json:"operation"`
}

type _OperationsInfo OperationsInfo

// NewOperationsInfo instantiates a new OperationsInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOperationsInfo(asset0Info AssetInfoSchema, asset1Info AssetInfoSchema, operation OperationStat) *OperationsInfo {
	this := OperationsInfo{}
	this.Asset0Info = asset0Info
	this.Asset1Info = asset1Info
	this.Operation = operation
	return &this
}

// NewOperationsInfoWithDefaults instantiates a new OperationsInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOperationsInfoWithDefaults() *OperationsInfo {
	this := OperationsInfo{}
	return &this
}

// GetAsset0Info returns the Asset0Info field value
func (o *OperationsInfo) GetAsset0Info() AssetInfoSchema {
	if o == nil {
		var ret AssetInfoSchema
		return ret
	}

	return o.Asset0Info
}

// GetAsset0InfoOk returns a tuple with the Asset0Info field value
// and a boolean to check if the value has been set.
func (o *OperationsInfo) GetAsset0InfoOk() (*AssetInfoSchema, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Asset0Info, true
}

// SetAsset0Info sets field value
func (o *OperationsInfo) SetAsset0Info(v AssetInfoSchema) {
	o.Asset0Info = v
}

// GetAsset1Info returns the Asset1Info field value
func (o *OperationsInfo) GetAsset1Info() AssetInfoSchema {
	if o == nil {
		var ret AssetInfoSchema
		return ret
	}

	return o.Asset1Info
}

// GetAsset1InfoOk returns a tuple with the Asset1Info field value
// and a boolean to check if the value has been set.
func (o *OperationsInfo) GetAsset1InfoOk() (*AssetInfoSchema, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Asset1Info, true
}

// SetAsset1Info sets field value
func (o *OperationsInfo) SetAsset1Info(v AssetInfoSchema) {
	o.Asset1Info = v
}

// GetOperation returns the Operation field value
func (o *OperationsInfo) GetOperation() OperationStat {
	if o == nil {
		var ret OperationStat
		return ret
	}

	return o.Operation
}

// GetOperationOk returns a tuple with the Operation field value
// and a boolean to check if the value has been set.
func (o *OperationsInfo) GetOperationOk() (*OperationStat, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Operation, true
}

// SetOperation sets field value
func (o *OperationsInfo) SetOperation(v OperationStat) {
	o.Operation = v
}

func (o OperationsInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OperationsInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["asset0_info"] = o.Asset0Info
	toSerialize["asset1_info"] = o.Asset1Info
	toSerialize["operation"] = o.Operation
	return toSerialize, nil
}

func (o *OperationsInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"asset0_info",
		"asset1_info",
		"operation",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOperationsInfo := _OperationsInfo{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varOperationsInfo)

	if err != nil {
		return err
	}

	*o = OperationsInfo(varOperationsInfo)

	return err
}

type NullableOperationsInfo struct {
	value *OperationsInfo
	isSet bool
}

func (v NullableOperationsInfo) Get() *OperationsInfo {
	return v.value
}

func (v *NullableOperationsInfo) Set(val *OperationsInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableOperationsInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableOperationsInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOperationsInfo(val *OperationsInfo) *NullableOperationsInfo {
	return &NullableOperationsInfo{value: val, isSet: true}
}

func (v NullableOperationsInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOperationsInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


