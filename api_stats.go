/*
ston-server

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.13.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// StatsAPIService StatsAPI service
type StatsAPIService service

type ApiGetDexStatsRequest struct {
	ctx context.Context
	ApiService *StatsAPIService
	since *string
	until *string
}

// Time since stats are requested (YYYY-MM-DDTHH:MM:SS)
func (r ApiGetDexStatsRequest) Since(since string) ApiGetDexStatsRequest {
	r.since = &since
	return r
}

// Time until stats are requested (YYYY-MM-DDTHH:MM:SS)
func (r ApiGetDexStatsRequest) Until(until string) ApiGetDexStatsRequest {
	r.until = &until
	return r
}

func (r ApiGetDexStatsRequest) Execute() (*http.Response, error) {
	return r.ApiService.GetDexStatsExecute(r)
}

/*
GetDexStats Method for GetDexStats

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetDexStatsRequest
*/
func (a *StatsAPIService) GetDexStats(ctx context.Context) ApiGetDexStatsRequest {
	return ApiGetDexStatsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *StatsAPIService) GetDexStatsExecute(r ApiGetDexStatsRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "StatsAPIService.GetDexStats")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/stats/dex"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.since != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "since", r.since, "")
	}
	if r.until != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "until", r.until, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetOperationStatsRequest struct {
	ctx context.Context
	ApiService *StatsAPIService
	since *string
	until *string
}

// Time since the stats are requested (YYYY-MM-DDTHH:MM:SS)
func (r ApiGetOperationStatsRequest) Since(since string) ApiGetOperationStatsRequest {
	r.since = &since
	return r
}

// Time until pool stats are requested (YYYY-MM-DDTHH:MM:SS)
func (r ApiGetOperationStatsRequest) Until(until string) ApiGetOperationStatsRequest {
	r.until = &until
	return r
}

func (r ApiGetOperationStatsRequest) Execute() (*GetOperationStats200Response, *http.Response, error) {
	return r.ApiService.GetOperationStatsExecute(r)
}

/*
GetOperationStats Method for GetOperationStats

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetOperationStatsRequest
*/
func (a *StatsAPIService) GetOperationStats(ctx context.Context) ApiGetOperationStatsRequest {
	return ApiGetOperationStatsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GetOperationStats200Response
func (a *StatsAPIService) GetOperationStatsExecute(r ApiGetOperationStatsRequest) (*GetOperationStats200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetOperationStats200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "StatsAPIService.GetOperationStats")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/stats/operations"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.since == nil {
		return localVarReturnValue, nil, reportError("since is required and must be specified")
	}
	if r.until == nil {
		return localVarReturnValue, nil, reportError("until is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "since", r.since, "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "until", r.until, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetPoolStatsRequest struct {
	ctx context.Context
	ApiService *StatsAPIService
	since *string
	until *string
}

// Time since the stats are requested (YYYY-MM-DDTHH:MM:SS)
func (r ApiGetPoolStatsRequest) Since(since string) ApiGetPoolStatsRequest {
	r.since = &since
	return r
}

// Time until pool stats are requested (YYYY-MM-DDTHH:MM:SS)
func (r ApiGetPoolStatsRequest) Until(until string) ApiGetPoolStatsRequest {
	r.until = &until
	return r
}

func (r ApiGetPoolStatsRequest) Execute() (*GetPoolStats200Response, *http.Response, error) {
	return r.ApiService.GetPoolStatsExecute(r)
}

/*
GetPoolStats Method for GetPoolStats

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetPoolStatsRequest
*/
func (a *StatsAPIService) GetPoolStats(ctx context.Context) ApiGetPoolStatsRequest {
	return ApiGetPoolStatsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GetPoolStats200Response
func (a *StatsAPIService) GetPoolStatsExecute(r ApiGetPoolStatsRequest) (*GetPoolStats200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetPoolStats200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "StatsAPIService.GetPoolStats")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/stats/pool"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.since == nil {
		return localVarReturnValue, nil, reportError("since is required and must be specified")
	}
	if r.until == nil {
		return localVarReturnValue, nil, reportError("until is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "since", r.since, "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "until", r.until, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
