/*
ston-server

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.13.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// JettonAPIService JettonAPI service
type JettonAPIService service

type ApiGetWalletAddressRequest struct {
	ctx context.Context
	ApiService *JettonAPIService
	ownerAddress *string
	addrStr string
}

// Address of the owner
func (r ApiGetWalletAddressRequest) OwnerAddress(ownerAddress string) ApiGetWalletAddressRequest {
	r.ownerAddress = &ownerAddress
	return r
}

func (r ApiGetWalletAddressRequest) Execute() (*GetWalletAddress200Response, *http.Response, error) {
	return r.ApiService.GetWalletAddressExecute(r)
}

/*
GetWalletAddress Method for GetWalletAddress

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param addrStr
 @return ApiGetWalletAddressRequest
*/
func (a *JettonAPIService) GetWalletAddress(ctx context.Context, addrStr string) ApiGetWalletAddressRequest {
	return ApiGetWalletAddressRequest{
		ApiService: a,
		ctx: ctx,
		addrStr: addrStr,
	}
}

// Execute executes the request
//  @return GetWalletAddress200Response
func (a *JettonAPIService) GetWalletAddressExecute(r ApiGetWalletAddressRequest) (*GetWalletAddress200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetWalletAddress200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "JettonAPIService.GetWalletAddress")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/jetton/{addr_str}/address"
	localVarPath = strings.Replace(localVarPath, "{"+"addr_str"+"}", url.PathEscape(parameterValueToString(r.addrStr, "addrStr")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.ownerAddress == nil {
		return localVarReturnValue, nil, reportError("ownerAddress is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "owner_address", r.ownerAddress, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
