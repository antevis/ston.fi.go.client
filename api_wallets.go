/*
ston-server

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.13.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// WalletsAPIService WalletsAPI service
type WalletsAPIService service

type ApiGetWalletAssetsRequest struct {
	ctx context.Context
	ApiService *WalletsAPIService
	addrStr string
}

func (r ApiGetWalletAssetsRequest) Execute() (*GetAssetList200Response, *http.Response, error) {
	return r.ApiService.GetWalletAssetsExecute(r)
}

/*
GetWalletAssets Method for GetWalletAssets

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param addrStr
 @return ApiGetWalletAssetsRequest
*/
func (a *WalletsAPIService) GetWalletAssets(ctx context.Context, addrStr string) ApiGetWalletAssetsRequest {
	return ApiGetWalletAssetsRequest{
		ApiService: a,
		ctx: ctx,
		addrStr: addrStr,
	}
}

// Execute executes the request
//  @return GetAssetList200Response
func (a *WalletsAPIService) GetWalletAssetsExecute(r ApiGetWalletAssetsRequest) (*GetAssetList200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetAssetList200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WalletsAPIService.GetWalletAssets")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/wallets/{addr_str}/assets"
	localVarPath = strings.Replace(localVarPath, "{"+"addr_str"+"}", url.PathEscape(parameterValueToString(r.addrStr, "addrStr")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetWalletFarmRequest struct {
	ctx context.Context
	ApiService *WalletsAPIService
	addrStr string
}

func (r ApiGetWalletFarmRequest) Execute() (*GetFarmList200Response, *http.Response, error) {
	return r.ApiService.GetWalletFarmExecute(r)
}

/*
GetWalletFarm Method for GetWalletFarm

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param addrStr
 @return ApiGetWalletFarmRequest
*/
func (a *WalletsAPIService) GetWalletFarm(ctx context.Context, addrStr string) ApiGetWalletFarmRequest {
	return ApiGetWalletFarmRequest{
		ApiService: a,
		ctx: ctx,
		addrStr: addrStr,
	}
}

// Execute executes the request
//  @return GetFarmList200Response
func (a *WalletsAPIService) GetWalletFarmExecute(r ApiGetWalletFarmRequest) (*GetFarmList200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetFarmList200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WalletsAPIService.GetWalletFarm")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/wallets/{addr_str}/farms"
	localVarPath = strings.Replace(localVarPath, "{"+"addr_str"+"}", url.PathEscape(parameterValueToString(r.addrStr, "addrStr")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetWalletOperationsRequest struct {
	ctx context.Context
	ApiService *WalletsAPIService
	since *string
	until *string
	addrStr string
	opType *string
}

// Time since the stats are requested (YYYY-MM-DDTHH:MM:SS)
func (r ApiGetWalletOperationsRequest) Since(since string) ApiGetWalletOperationsRequest {
	r.since = &since
	return r
}

// Time until pool stats are requested (YYYY-MM-DDTHH:MM:SS)
func (r ApiGetWalletOperationsRequest) Until(until string) ApiGetWalletOperationsRequest {
	r.until = &until
	return r
}

// target op type
func (r ApiGetWalletOperationsRequest) OpType(opType string) ApiGetWalletOperationsRequest {
	r.opType = &opType
	return r
}

func (r ApiGetWalletOperationsRequest) Execute() (*GetOperationStats200Response, *http.Response, error) {
	return r.ApiService.GetWalletOperationsExecute(r)
}

/*
GetWalletOperations Method for GetWalletOperations

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param addrStr
 @return ApiGetWalletOperationsRequest
*/
func (a *WalletsAPIService) GetWalletOperations(ctx context.Context, addrStr string) ApiGetWalletOperationsRequest {
	return ApiGetWalletOperationsRequest{
		ApiService: a,
		ctx: ctx,
		addrStr: addrStr,
	}
}

// Execute executes the request
//  @return GetOperationStats200Response
func (a *WalletsAPIService) GetWalletOperationsExecute(r ApiGetWalletOperationsRequest) (*GetOperationStats200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetOperationStats200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WalletsAPIService.GetWalletOperations")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/wallets/{addr_str}/operations"
	localVarPath = strings.Replace(localVarPath, "{"+"addr_str"+"}", url.PathEscape(parameterValueToString(r.addrStr, "addrStr")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.since == nil {
		return localVarReturnValue, nil, reportError("since is required and must be specified")
	}
	if r.until == nil {
		return localVarReturnValue, nil, reportError("until is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "since", r.since, "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "until", r.until, "")
	if r.opType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "op_type", r.opType, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetWalletPoolsRequest struct {
	ctx context.Context
	ApiService *WalletsAPIService
	addrStr string
}

func (r ApiGetWalletPoolsRequest) Execute() (*GetPoolList200Response, *http.Response, error) {
	return r.ApiService.GetWalletPoolsExecute(r)
}

/*
GetWalletPools Method for GetWalletPools

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param addrStr
 @return ApiGetWalletPoolsRequest
*/
func (a *WalletsAPIService) GetWalletPools(ctx context.Context, addrStr string) ApiGetWalletPoolsRequest {
	return ApiGetWalletPoolsRequest{
		ApiService: a,
		ctx: ctx,
		addrStr: addrStr,
	}
}

// Execute executes the request
//  @return GetPoolList200Response
func (a *WalletsAPIService) GetWalletPoolsExecute(r ApiGetWalletPoolsRequest) (*GetPoolList200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetPoolList200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WalletsAPIService.GetWalletPools")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/wallets/{addr_str}/pools"
	localVarPath = strings.Replace(localVarPath, "{"+"addr_str"+"}", url.PathEscape(parameterValueToString(r.addrStr, "addrStr")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
