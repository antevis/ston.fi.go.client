/*
ston-server

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.13.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// AssetKindSchema the model 'AssetKindSchema'
type AssetKindSchema string

// List of AssetKindSchema
const (
	JETTON AssetKindSchema = "Jetton"
	WTON AssetKindSchema = "Wton"
	TON AssetKindSchema = "Ton"
)

// All allowed values of AssetKindSchema enum
var AllowedAssetKindSchemaEnumValues = []AssetKindSchema{
	"Jetton",
	"Wton",
	"Ton",
}

func (v *AssetKindSchema) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AssetKindSchema(value)
	for _, existing := range AllowedAssetKindSchemaEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AssetKindSchema", value)
}

// NewAssetKindSchemaFromValue returns a pointer to a valid AssetKindSchema
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAssetKindSchemaFromValue(v string) (*AssetKindSchema, error) {
	ev := AssetKindSchema(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AssetKindSchema: valid values are %v", v, AllowedAssetKindSchemaEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AssetKindSchema) IsValid() bool {
	for _, existing := range AllowedAssetKindSchemaEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AssetKindSchema value
func (v AssetKindSchema) Ptr() *AssetKindSchema {
	return &v
}

type NullableAssetKindSchema struct {
	value *AssetKindSchema
	isSet bool
}

func (v NullableAssetKindSchema) Get() *AssetKindSchema {
	return v.value
}

func (v *NullableAssetKindSchema) Set(val *AssetKindSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableAssetKindSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableAssetKindSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAssetKindSchema(val *AssetKindSchema) *NullableAssetKindSchema {
	return &NullableAssetKindSchema{value: val, isSet: true}
}

func (v NullableAssetKindSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAssetKindSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

